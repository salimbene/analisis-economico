KevinDurant_FG <- c(306,306,587,661,794,711,643,731,849,238)
DerrickRose_FG <- c(208,208,208,574,672,711,302,0,58,338)
DwayneWade_FG <- c(699,472,439,854,719,692,416,569,415,509)
#Matrix
FieldGoals <- rbind(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
rm(KobeBryant_FG, JoeJohnson_FG, LeBronJames_FG, CarmeloAnthony_FG, DwightHoward_FG, ChrisBosh_FG, ChrisPaul_FG, KevinDurant_FG, DerrickRose_FG, DwayneWade_FG)
colnames(FieldGoals) <- Seasons
rownames(FieldGoals) <- Players
#Field Goal Attempts
KobeBryant_FGA <- c(2173,1757,1690,1712,1569,1639,1336,1595,73,713)
JoeJohnson_FGA <- c(1395,1139,1497,1420,1386,1161,931,1052,1018,1025)
LeBronJames_FGA <- c(1823,1621,1642,1613,1528,1485,1169,1354,1353,1279)
CarmeloAnthony_FGA <- c(1572,1453,1481,1207,1502,1503,1025,1489,1643,806)
DwightHoward_FGA <- c(881,873,974,979,834,1044,726,813,800,423)
ChrisBosh_FGA <- c(1087,1094,1027,1263,1158,1056,807,907,953,745)
ChrisPaul_FGA <- c(947,871,1291,1255,637,928,890,856,870,1170)
KevinDurant_FGA <- c(647,647,1366,1390,1668,1538,1297,1433,1688,467)
DerrickRose_FGA <- c(436,436,436,1208,1373,1597,695,0,164,835)
DwayneWade_FGA <- c(1413,962,937,1739,1511,1384,837,1093,761,1084)
#Matrix
FieldGoalAttempts <- rbind(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
rm(KobeBryant_FGA, JoeJohnson_FGA, LeBronJames_FGA, CarmeloAnthony_FGA, DwightHoward_FGA, ChrisBosh_FGA, ChrisPaul_FGA, KevinDurant_FGA, DerrickRose_FGA, DwayneWade_FGA)
colnames(FieldGoalAttempts) <- Seasons
rownames(FieldGoalAttempts) <- Players
#Points
KobeBryant_PTS <- c(2832,2430,2323,2201,1970,2078,1616,2133,83,782)
JoeJohnson_PTS <- c(1653,1426,1779,1688,1619,1312,1129,1170,1245,1154)
LeBronJames_PTS <- c(2478,2132,2250,2304,2258,2111,1683,2036,2089,1743)
CarmeloAnthony_PTS <- c(2122,1881,1978,1504,1943,1970,1245,1920,2112,966)
DwightHoward_PTS <- c(1292,1443,1695,1624,1503,1784,1113,1296,1297,646)
ChrisBosh_PTS <- c(1572,1561,1496,1746,1678,1438,1025,1232,1281,928)
ChrisPaul_PTS <- c(1258,1104,1684,1781,841,1268,1189,1186,1185,1564)
KevinDurant_PTS <- c(903,903,1624,1871,2472,2161,1850,2280,2593,686)
DerrickRose_PTS <- c(597,597,597,1361,1619,2026,852,0,159,904)
DwayneWade_PTS <- c(2040,1397,1254,2386,2045,1941,1082,1463,1028,1331)
#Matrix
Points <- rbind(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
rm(KobeBryant_PTS, JoeJohnson_PTS, LeBronJames_PTS, CarmeloAnthony_PTS, DwightHoward_PTS, ChrisBosh_PTS, ChrisPaul_PTS, KevinDurant_PTS, DerrickRose_PTS, DwayneWade_PTS)
colnames(Points) <- Seasons
rownames(Points) <- Players
matplot(MinutesPlayed, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players,col=c(1:4,6), pch=15:18, horiz=F)
myplot()
myplot <- function(){
Data <- MinutesPlayed[1,,drop=F]
matplot(MinutesPlayed, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[1],col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(1)
myplot(1:5)
myplot(1:5)
Data <- MinutesPlayed[rows,,drop=F]
matplot(MinutesPlayed, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inse
a <- MinutesPlayed[1,,drop=F]
matplot(MinutesPlayed, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",ins
Data <- MinutesPlayed[1,,drop=F]
matplot(MinutesPlayed, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[1],col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1,,drop=F]
matplot(Data, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[1],col=c(1:4,6), pch=15:18, horiz=F)
}
Data <- MinutesPlayed[1,,drop=F]
matplot(Data, type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[1],col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[1,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[1],col=c(1:4,6), pch=15:18, horiz=F)
Data <- MinutesPlayed[rows],,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[rpws],col=c(1:4,6), pch=15:18, horiz=F)
myplot(1:5)
myplot(1:5)
myplot <- function(rows){
Data <- MinutesPlayed[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[rows],col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(1:5)
myplot(1)
myplot <- function(dara, rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[rows],col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary,1:2)
myplot(Salary,1:2)
myplot <- function(data, rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
legend("bottomleft",inset=0.01,legend=Players[rows],col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary,1:2)
#Salary
myploy(Salary)
#Salary
myplot(Salary)
myplot <- function(data, rows){
Data <- data[rows,,drop=F]
matplot(t(Data), type="b", pch=15:18, col=c(1:4,6))
#legend("bottomleft",inset=0.01,legend=Players[rows],col=c(1:4,6), pch=15:18, horiz=F)
}
myplot(Salary,1:2)
#Salary
myplot(Salary)
#Salary
myplot(Salary / Games)
#Salary
myplot(Salary / FieldGoals)
myplot(MinutesPlayed)
myplot(Points)
myplot(FieldGoals/Games)
myplot(FieldGoals/FieldGoalAttempts)
myplot(FieldGoalAttempts/Games)
myplot(MinutesPlayed/Games)
myplot(Games)
myplot(FieldGoals/MinutesPlayed)
myplot(Points/FieldGoals)
1:3 * 5
rnorm(1)
rnorm(100)
a <- "123456"
substr(a,2,4)
substr(a,5,6)
a[2]
substr(a,7,8)
substr(a,7,8)
substr(a,6,7
)
substr(a,6,7)
substr(a,6,8)
a <- "01-01-65"
substr(a,6,8)
?substr
substr(a,7,8)
b <- substr(a, 1, 6) + "19" + substr(a, 7, 8)
b <-paste(substr(a, 1, 6), "19", substr(a, 7, 8))
b
b <- paste(substr(a, 1, 6),19,substr(a, 7, 8))
b
b <- paste(substr(a, 1, 6),19,substr(a, 7, 8), sep = "")
b
substr(a, 1, 6)
substr(a, 7, 8)
substr(a, 7, 8) > 10
substr(a, 7, 8) < 10
salario <- read.csv("indice-salario-minimo-vital-movil-valores-mensuales-pesos-corrientes-desde-1988.csv", stringsAsFactors = F)
salario <- read.csv("indice-salario-minimo-vital-movil-valores-mensuales-pesos-corrientes-desde-1988.csv", stringsAsFactors = F)
salario <- read.csv("~/dev/learning/r/eco/indice-salario-minimo-vital-movil-valores-mensuales-pesos-corrientes-desde-1988.csv", stringsAsFactors = F)
colnames(salario) <- c("Fecha","Mensual","Diario","Hora")
salario$fecha[substr(salario$fecha, 7, 8) > 60] <- paste(substr(salario$fecha, 1, 6),19,substr(salario$fecha, 7, 8), sep = "")
salario$Fecha[substr(salario$Fecha, 7, 8) > 60] <- paste(substr(salario$Fecha, 1, 6),19,substr(salario$Fecha, 7, 8), sep = "")
salario$Fecha[substr(salario$Fecha, 7, 8) > 60]
salario$Fecha[substr(salario$Fecha, 7, 8) > 60]
nrow(salario$Fecha[substr(salario$Fecha, 7, 8) > 60])
head(salario)
salario <- read.csv("~/dev/learning/r/eco/indice-salario-minimo-vital-movil-valores-mensuales-pesos-corrientes-desde-1988.csv", stringsAsFactors = F)
head(salario)
str(salario)
install.packages("shiny")
library(shiny)
server = function(input, output, session){}
library(shiny)
server = function(input, output, session){}
ui = basicPage("lalala")
shinyApp(ui = ui, server = server)
server <- function(input,output, session) {
}
ui <-   basicPage(
h1("Using textInput and checkboxInput"),
textInput("mystring", "Write here"),
checkboxInput("mycheckbox", "Factor Y")
)
shinyApp(ui = ui, server = server)
?textInput
server <- function(input, output, session) {
observe({
addtext <- paste("your initial input:", input$mystring)
updateTextInput(session, "mystring2", value=addtext)
})
}
ui <-   basicPage(
h1("Using Observe"),
textInput("mystring", "Write here"),
textInput("mystring2", "Full App Output")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
data <- reactive({
rnorm(50) * input$myslider
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
}
ui <- basicPage(
h1("Using Reactive"),
sliderInput(inputId = "myslider",
label = "Slider1",
value = 1, min = 1, max = 20),
plotOutput("plot")
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
"my sidebar"
),
mainPanel(
"my mainpanel"
)
)
)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {}
ui <- fluidPage(
titlePanel("using Tabsets"), # our title
sidebarLayout(
sidebarPanel(
sliderInput(inputId = "s1",
label = "My Slider",
value = 1, min = 1, max = 20)
),
mainPanel(
tabsetPanel(
tabPanel("Tab1", "First Tab"),
tabPanel("Tab2", "Second Tab"),
tabPanel("Tab3", "Third Tab")
)
)
)
)
shinyApp(ui = ui, server = server)
####
?withTags
names(tags)
setwd('/Users/matisalimba/dev/learning/r/eco')
library(shiny)
library(ggplot2)
library(readxl)
base <- read_xlsx("base_monetaria_bcra.xlsx")
base <- as.data.frame(base)
colnames(base) <- c("Fecha","Pesos")
base$Fecha <- as.Date(base$Fecha)
head(base)
server = function(input, output, session){}
ui = basicPage("lalala")
shinyApp(ui = ui, server = server)
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "Slider1",
value = 1, min = 1, max = 20)
)
shinyApp(ui = ui, server = server)
summary(base)
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "Slider1",
value = "1996-02-01", min = "1996-02-01", max = "2021-01-28")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "Slider1",
value = 1, min = as.Date("1996-02-01"), max = as.Date("2021-01-28"))
)
shinyApp(ui = ui, server = server)
?sliderInput
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "Slider1",
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "lalala",
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "lalala",
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
ui = basicPage(
sliderInput(inputId = "myslider",
label = "lalala",
value=as.Date("1996-02-01")
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
ui = basicPage(
sliderInput(inputId = "myslider",
label = "lalala",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
ui = basicPage(
sliderInput(inputId = "myslider",
label = "lalala",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){}
ui = basicPage(
sliderInput(inputId = "myslider",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
shinyApp(ui = ui, server = server)
rnorm(50) * 3
head(base)
base[base$Fecha <= as.Date("2015/01/01"),]
head(base[base$Fecha <= as.Date("2015/01/01"),])
tail(base[base$Fecha <= as.Date("2015/01/01"),])
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
#g <- ggplot() +
# geom_point(data=base, aes(x=Fecha, y=Pesos)
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
#g <- ggplot() +
# geom_point(data=base, aes(x=Fecha, y=Pesos)
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F")
plotOutput("plot")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
#g <- ggplot() +
# geom_point(data=base, aes(x=Fecha, y=Pesos)
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F"),
plotOutput("plot")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
output$ggplot <- renderPlot({
ggplot() +
geom_point(data=data(), aes(x=Fecha, y=Pesos))
})
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F"),
plotOutput("ggplot")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
output$ggplot <- renderPlot({
ggplot() +
geom_line(data=data(), aes(x=Fecha, y=Pesos))
})
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F"),
plotOutput("ggplot")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
output$ggplot <- renderPlot({
ggplot() +
geom_line(data=data(), aes(x=Fecha, y=Pesos)) +
geom_line(data=data(), aes(x=Fecha, y=Pesos+2), colour="red")
})
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F"),
plotOutput("ggplot")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
output$ggplot <- renderPlot({
ggplot() +
geom_line(data=data(), aes(x=Fecha, y=Pesos)) +
geom_line(data=data(), aes(x=Fecha, y=Pesos+2))
})
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F"),
plotOutput("ggplot")
)
shinyApp(ui = ui, server = server)
server = function(input, output, session){
data <- reactive({
base[base$Fecha <= input$sliderBase,]
})
output$plot <- renderPlot({
plot(data(), col = "red", pch = 21, bty = "n")
})
output$ggplot <- renderPlot({
ggplot() +
geom_line(data=data(), aes(x=Fecha, y=Pesos)) +
geom_point(data=data(), aes(x=Fecha, y=Pesos), colour="red")
})
}
ui = basicPage(
sliderInput(inputId = "sliderBase",
label = "Base monetaria",
value = as.Date("1996-02-01"),
min = as.Date("1996-02-01"),
max = as.Date("2021-01-28"),
timeFormat = "%F"),
plotOutput("ggplot")
)
shinyApp(ui = ui, server = server)
